// VARS
@import 'mixins.scss';
// mixins
@import "variable.scss";
// CIRCLE

//Gauge
.sc-gauge  { width:200px; height:200px; margin:200px auto; }
.sc-background { position:relative; height:100px; margin-bottom:10px; background-color:#fff; border-radius:150px 150px 0 0; overflow:hidden; text-align:center; }
.sc-mask { position:absolute; top:20px; right:20px; left:20px; height:80px; background-color:#f9fafe; border-radius:150px 150px 0 0 }
.sc-percentage { position:absolute; top:100px; left:-200%; width:400%; height:400%; margin-left:100px; background-color:#00aeef; }
.sc-percentage { transform:rotate(158deg); transform-origin:top center; }
.sc-min { float:left; }
.sc-max { float:right; }
.sc-value { position:absolute; top:50%; left:0; width:100%;  font-size:40px; font-weight:700 }
// classes 2 extend
body{
    background-color: #f5f5f5;
    margin: 0;
    padding: 0;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
    text-align:center;
}

.page {
    margin: 40px;
}

h1{
    margin: 40px 0 60px 0;
}

.dark-area {
    background-color: #666;
    padding: 40px;
    margin: 0 -40px 20px -40px;
    clear: both;
}

.clearfix:before,.clearfix:after {content: " "; display: table;}
.clearfix:after {clear: both;}
.clearfix {*zoom: 1;}

.rect-auto {
    clip: rect(auto, auto, auto, auto);
}

.pie {
    position: absolute;
    border: $circle-width solid #87afff;
    width: 1 - (2 * $circle-width);
    height: 1 - (2 * $circle-width);
    clip: rect(0em, 0.5em, 1em, 0em);
    border-radius: 50%;
    @include rotate(0deg);
}

.pie-fill {
    @include rotate(0deg);
}

// main
.c100 {
    *,
    *:before,
    *:after {
        @include box-sizing(content-box);
    }
    position: relative;
    font-size: 120px;
    width: 1em;
    height: 1em;
    border-radius: 50%;
    margin: auto;
    background-color: $secondary-color;
    // center circle to its parent
    &.center {
        float: none;
        margin: 0 auto;
    }
    // bigger size
    &.big {
        font-size: 240px;
    }
    // smaller size
    &.small {
        font-size: 80px;
    }
    // centered value inside circle
    >span {
        position: absolute;
        width: 100%;
        z-index: 1;
        left: 0;
        top: 0;
        width: 5em;
        line-height: 5em;
        font-size: 0.2em;
        color: #171717;
        display: block;
        text-align: center;
        white-space: nowrap;
        @include transition-property(all);
        @include transition-duration(0.2s);
        @include transition-timing-function(ease-out);
    }
    // background inside the circle
    &:after {
        position: absolute;
        top: $circle-width;
        left: $circle-width;
        display: block;
        content: " ";
        border-radius: 50%;
        background-color: #f9fafe;
        width: 1 - (2 * $circle-width);
        height: 1 - (2 * $circle-width);
        @include transition-property(all);
        @include transition-duration(0.2s);
        @include transition-timing-function(ease-in);
    }
    // the slice (mask)
    .slice {
        position: absolute;
        width: 1em;
        height: 1em;
        clip: rect(0em, 1em, 1em, 0.5em);
    }
    // circle to show the status
    .bar {
        @extend .pie;
    }
    // loop to create all needed elements automatically
    @for $i from 51 through 100 {
        &.p#{$i} {
            & .slice {
                @extend .rect-auto;
            }
            &.bar:after {
                @extend .pie-fill;
            }
            & .fill {
                @extend .pie;
                @extend .pie-fill;
            }
        }
    }
    // loop to rotate all 100 circles
    @for $i from 1 through 100 {
        &.p#{$i} .bar {
            $degs: (360/100 * $i);
            @include rotate(#{$degs}deg);
        }
    }
    // hover styles
    &:hover {
        cursor: default;
        >span {
            width: 3.33em;
            line-height: 3.33em;
            font-size: 0.3em;
            color: $primary-color;
        }
        &:after {
            top: $circle-width-hover;
            left: $circle-width-hover;
            width: 1 - (2 * $circle-width-hover);
            height: 1 - (2 * $circle-width-hover);
        }
    }
    // override colors for the dark skin
    &.dark {
        background-color: $secondary-color-dark;
        .bar,
        .fill {
            border-color: $primary-color-dark !important;
        }
        >span {
            color: $secondary-color-dark;
        }
        &:after {
            background-color: $bg-color-dark;
        }
        &:hover {
            >span {
                color: $primary-color-dark;
            }
        }
    }
    // green skin
    &.green {
        .bar,
        .fill {
            border-color: $primary-color-green !important;
        }
        &:hover {
            >span {
                color: $primary-color-green;
            }
        }
    }
    &.green.dark {
        .bar,
        .fill {
            border-color: $primary-color-green-dark !important;
        }
        &:hover {
            >span {
                color: $primary-color-green-dark;
            }
        }
    }
    // orange skin
    &.orange {
        .bar,
        .fill {
            border-color: $primary-color-orange !important;
        }
        &:hover {
            >span {
                color: $primary-color-orange;
            }
        }
    }
    &.orange.dark {
        .bar,
        .fill {
            border-color: $primary-color-orange-dark !important;
        }
        &:hover {
            >span {
                color: $primary-color-orange-dark;
            }
        }
    }
}

//nb-card
.left {
    float: left;
    color: #fff;
    width: 45%;
}
.right {
    float: right;
    text-align: right;
    color: #fff;
}
.info.count {
    text-align: center;
}